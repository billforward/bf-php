import org.gradle.api.tasks.Exec
import org.apache.tools.ant.taskdefs.condition.Os
import org.apache.tools.ant.filters.*

// enable Gradle Wrapper support for bootstrapping with specific version
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

def build = new File(".")
def buildMacros = new File("$build/macros")
def root = new File("$build/..")
def composer = new File("$root/composer")
def lib = new File("$root/lib")
def test = new File("$root/test")
def distDir = new File("$root/dist")
def composerOutputDir = new File("$root/vendor/composer")

task ensureComposerInstalled(type:Exec) {
    workingDir "$composer"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'ensureComposerInstalled.bat'
    } else {
        commandLine 'sh', 'ensureComposerInstalled'
    }
}

task ensureComposerModulesInstalled(type:Exec) {
    workingDir "$composer"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'ensureComposerModulesInstalled.bat'
    } else {
        commandLine 'sh', 'ensureComposerModulesInstalled'
    }
}

task regenerateClassmap(type:Exec) {
    workingDir "$composer"
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine 'cmd', '/c', 'regenerateClassmap.bat'
    } else {
        commandLine 'sh', 'regenerateClassmap'
    }
}

task recompileClasspath() << {
    // TODO: spin this out into a shared task
    if (composerOutputDir.isDirectory()) {
        def out = "$lib"

        delete "$lib/BillForward.php"

        def regexp = new org.apache.tools.ant.types.RegularExpression()
        regexp.pattern = '[^ \n\t\r]+'
        copy {
            from composerOutputDir
            into "$out/"
            include 'autoload_classmap.php'
            rename ('autoload_classmap.php', 'classmap.php')
            // turn into empty lines any class mappings that don't point into BFPHPClient folder
            filter {
                line
                -> if (line.contains('=>') && line.contains('BFPHPClient/')) {
                        line
                    } else {
                        ''
                    }
            }
            filter {
                line -> line.contains('// autoload_classmap.php @generated by Composer') ? '' : line
            }
            // then remove all empty lines
            filter(org.apache.tools.ant.filters.LineContainsRegExp, regexps:[regexp])
            // add indent
            filter {
                line -> '        ' + line
            }
        }
        ant.replace(file: "$out/classmap.php", token: "/../lib", value: "")

        String classmapContents = new File("$out/classmap.php").text

        copy {
            from "$buildMacros/"
            into "$out/"
            include 'autoload_preamble.php'
            rename ('autoload_preamble.php', 'BillForward.php')
        }

        ant.replace(file: "$out/BillForward.php", token: "// MACROS TO BE EXPANDED BY BUILD..", value: "// THESE VARIABLES HAVE BEEN WRITTEN BY MACRO EXPANSION IN BUILD")
        ant.replace(file: "$out/BillForward.php", token: "%CLASSMAP%", value: "array(\n$classmapContents\n        );")
        ant.replace(file: "$out/BillForward.php", token: "%BASEDIR%", value: "dirname(__FILE__);")

        delete new File("$out/classmap.php")
    }
}

task setup(dependsOn: ['ensureComposerInstalled', 'ensureComposerModulesInstalled', 'regenerateClassmap', 'recompileClasspath']) {
}

task clearDist << {
    //delete distDir
    delete fileTree(dir: distDir) 
    distDir.mkdirs()
    // do something
}

task makeDist(dependsOn: ['setup', 'clearDist']) << {
    if (distDir.isDirectory()) {
        if (composerOutputDir.isDirectory()) {
            def out = "$distDir"

            copy {
                from "$lib/"
                into "$out/"
                include 'BFPHPClient/**/*.php'
                include 'BillForward.php'
            }

            copy {
                from "$root/"
                into "$out/"
                include 'ExampleUsage.php'
                filter {
                    line -> line.contains("\$path_to_BillForward = ") ? "\$path_to_BillForward ='BillForward.php';" : line
                }
            }
        }
    }
}